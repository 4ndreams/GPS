import axios from 'axios';
import { TokenService } from './tokenService';

// Funci√≥n de logging condicional para producci√≥n
const isDev = __DEV__;
const log = (message, ...args) => {
  if (isDev) {
    console.log(message, ...args);
  }
};

const api = axios.create({
  baseURL:  process.env.EXPO_PUBLIC_API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor request
api.interceptors.request.use(
  async (config) => {
    try {
      log('üîç Verificando token para petici√≥n:', config.method?.toUpperCase(), config.url);
      const token = await TokenService.getToken();
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        log('üîê Token a√±adido a la petici√≥n:', `Bearer ${token.substring(0, 20)}...`);
      } else {
        log('‚ö†Ô∏è No hay token disponible para la petici√≥n');
        log('üîç Intentando verificar si el token se guard√≥ recientemente...');
        
        // Peque√±o delay para permitir que se complete el guardado del token
        await new Promise(resolve => setTimeout(resolve, 100));
        const tokenRetry = await TokenService.getToken();
        if (tokenRetry) {
          config.headers.Authorization = `Bearer ${tokenRetry}`;
          log('‚úÖ Token encontrado en segundo intento:', `Bearer ${tokenRetry.substring(0, 20)}...`);
        } else {
          log('‚ùå Token definitivamente no disponible');
        }
      }
      log('üì§ Petici√≥n:', config.method?.toUpperCase(), config.url);
      return config;
    } catch (error) {
      console.error('‚ùå Error en interceptor request:', error); // Mantener errores cr√≠ticos
      return config;
    }
  },
  (error) => Promise.reject(error)
);

// Interceptor response
api.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;
      log('‚ùå Error 401: Token inv√°lido o expirado');
      
      await TokenService.removeToken();
      log('‚ùå Token eliminado por sesi√≥n expirada');
    }

    return Promise.reject(error);
  }
);

export default api;
